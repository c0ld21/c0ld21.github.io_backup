<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>theice</title><subtitle>hi</subtitle> <updated>2022-02-13T13:39:47-05:00</updated> <author> <name>Jimmy Nguyen</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2022 Jimmy Nguyen </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Decompetition CTF - malware</title><link href="/posts/malware/" rel="alternate" type="text/html" title="Decompetition CTF - malware" /><published>2022-02-12T00:00:00-05:00</published> <updated>2022-02-13T13:32:02-05:00</updated> <id>/posts/malware/</id> <content src="/posts/malware/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="rev" /> <summary> Overview: The goal is to reverse malware code and create native code that matches the assembly. I didn’t complete this 100% in time and the reversing is not as good as I wanted it to be (I’ll probably go back and do some fix-ups), but enjoyed it nonetheless. Since it would take up a lot of space posting the entire assembly code, we’ll go over each function one by one Problem (malware): ... </summary> </entry> <entry><title>Decompetition CTF - leipzig</title><link href="/posts/leipzig/" rel="alternate" type="text/html" title="Decompetition CTF - leipzig" /><published>2022-02-12T00:00:00-05:00</published> <updated>2022-02-13T13:32:02-05:00</updated> <id>/posts/leipzig/</id> <content src="/posts/leipzig/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="rev" /> <summary> Problem (leipzig): This code revolves around using functions in setjmp.h and sending various signals. From initial observation, it performs various inc and dec operations on global variables. main(): main: endbr64 push rbp mov rbp, rsp sub rsp, 0x20 mov [rbp-0x14], edi mov [rbp-0x20], rsi cmp [rbp-0x14], 2 ; check if argc != 2 je bloc... </summary> </entry> <entry><title>Decompetition CTF - babyc &amp; babycpp</title><link href="/posts/babyc-and-babycpp/" rel="alternate" type="text/html" title="Decompetition CTF - babyc &amp; babycpp" /><published>2022-02-12T00:00:00-05:00</published> <updated>2022-02-13T13:32:02-05:00</updated> <id>/posts/babyc-and-babycpp/</id> <content src="/posts/babyc-and-babycpp/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="rev" /> <summary> Overview: I spent some time this weekend playing Shellphish’s Decompetition ctf. It’s a ctf mainly for reverse engineers and the goal is to convert assembly into native code. There is a specific scoring algorithm as well as diff checkers so that you can compare what you wrote vs. what was in the original assembly. I enjoyed this format and wish there were more CTFs like it. I ... </summary> </entry> <entry><title>coffee shop</title><link href="/posts/coffeeshop/" rel="alternate" type="text/html" title="coffee shop" /><published>2021-12-11T00:00:00-05:00</published> <updated>2021-12-11T00:00:00-05:00</updated> <id>/posts/coffeeshop/</id> <content src="/posts/coffeeshop/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="pwn" /> <summary> Notes: Upon initial inspection we see that all mitigations are enabled (Full RELRO, canary, NX, PIE) Looking at the code we can see that there is a classic menu that gives us the options to allocate, edit, free, and view heap memory There are other options such as using the “manager” data, but I aimed for exploiting it via tcache poisoning using the above menu options The first three o... </summary> </entry> <entry><title>write-what-where</title><link href="/posts/www/" rel="alternate" type="text/html" title="write-what-where" /><published>2021-09-25T00:00:00-04:00</published> <updated>2021-09-25T00:00:00-04:00</updated> <id>/posts/www/</id> <content src="/posts/www/" /> <author> <name>Jimmy Nguyen</name> </author> <category term="pwn" /> <summary> Notes: A classic write-what-where challenge, only this time we get only a single write at a specified location Plan: Try to overwrite something that can “restart” the program, giving us multiple writes to work with Since we have partial RELRO, we can target the GOT and overwrite something there with something useful I overwrote exit.got with 0x4011ca, which is just a little bit into... </summary> </entry> </feed>
